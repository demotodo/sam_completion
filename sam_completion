_sam(){
  local cur prev cword
  _get_comp_words_by_ref -n : cur prev cword

  COMPREPLY=( $(compgen -W "${comp}" -f -- "${cur}") )

  ## SAM CLI 1.58.0
  #
  # sam <second word>
  if [ "${cword}" -eq 1 ]; then
    COMPREPLY=( $(compgen -W "build delete deploy init local logs package pipeline publish sync traces validate --debug --version --info --help" -- "${cur}") )
    return 0
  fi

  # sam build/delete/deploy/init/local/logs/package/pipeline/publish/sync/traces/validate <third word>
  if [ "${cword}" -eq 2 ]; then

      # -----------------------
      # sam build <third word>
      # -----------------------
      if [ "${prev}" = "build" ]; then
        comp="--base-dir --beta-features --build-dir --build-image --cache-dir --cached --config-env --config-file --container-env-var --container-env-var-file --debug --docker-network --exclude --help --manifest --no-beta-features --no-cached --parallel --parameter-overrides --profile --region --skip-pull-image --template --template-file --use-container"
        COMPREPLY=( $(compgen -W "${comp}" -f -- "${cur}") )
      fi

      # -----------------------
      # sam delete <third word>
      # -----------------------
      if [ "${prev}" = "delete" ]; then
        comp="--config-env --config-file --debug --help --no-prompts --profile --region --s3-bucket --s3-prefix --stack-name"
        COMPREPLY=( $(compgen -W "${comp}" -f -- "${cur}") )
      fi

      # -----------------------
      # sam deploy <third word>
      # -----------------------
      if [ "${prev}" = "deploy" ]; then
        comp="--capabilities --config-env --config-file --confirm-changeset --debug --disable-rollback --fail-on-empty-changeset --force-upload --guided --help --image-repositories --image-repository --kms-key-id --metadata --no-confirm-changeset --no-disable-rollback --no-execute-changeset --no-fail-on-empty-changeset --no-progressbar --notification-arns --on-failure --parameter-overrides --profile --region --resolve-image-repos --resolve-s3 --role-arn --s3-bucket --s3-prefix --signing-profiles --stack-name --tags --template --template-file --use-json"
        COMPREPLY=( $(compgen -W "${comp}" -f -- "${cur}") )
      fi

      # -----------------------
      # sam init <third word>
      # -----------------------
      if [ "${prev}" = "init" ]; then
        comp="--app-template --architecture --base-image --config-env --config-file --debug --dependency-manager --extra-context --help --location --name --no-input --no-interactive --no-tracing --output-dir --package-type --runtime --tracing"
        COMPREPLY=( $(compgen -W "${comp}" -- "${cur}") )
      fi

      # -----------------------
      # sam local <third word>
      # -----------------------
      if [ "${prev}" = "local" ]; then
        comp="generate-event invoke start-api start-lambda --help"
        COMPREPLY=( $(compgen -W "${comp}" -- "${cur}") )
      fi

      # -----------------------
      # sam logs <third word>
      # -----------------------
      if [ "${prev}" = "logs" ]; then
        comp="--config-env --config-file --cw-log-group --debug --end-time --filter --help --include-traces --name --output --profile --region --stack-name --start-time --tail"
        COMPREPLY=( $(compgen -W "${comp}" -f -- "${cur}") )
      fi

      # -----------------------
      # sam package <third word>
      # -----------------------
      if [ "${prev}" = "package" ]; then
        comp="--config-env --config-file --debug --force-upload --help --image-repositories --image-repository --kms-key-id --metadata --no-progressbar --output-template-file --profile --region --resolve-s3 --s3-bucket --s3-prefix --signing-profiles --template --template-file --use-json"
        COMPREPLY=( $(compgen -W "${comp}" -f -- "${cur}") )
      fi

      # -----------------------
      # sam pipeline <third word>
      # -----------------------
      if [ "${prev}" = "pipeline" ]; then
        comp="bootstrap init --help"
        COMPREPLY=( $(compgen -W "${comp}" -f -- "${cur}") )
      fi

      # -----------------------
      # sam publish <third word>
      # -----------------------
      if [ "${prev}" = "publish" ]; then
        comp="--config-env --config-file --debug --help --profile --region --semantic-version --template --template-file"
        COMPREPLY=( $(compgen -W "${comp}" -f -- "${cur}") )
      fi

      # -----------------------
      # sam sync <third word>
      # -----------------------
      if [ "${prev}" = "sync" ]; then
        comp="--base-dir --capabilities --code --config-env --config-file --debug --dependency-layer --help --image-repositories --image-repository --kms-key-id --metadata --no-dependency-layer --notification-arns --parameter-overrides --profile --region --resource --resource-id --role-arn --s3-bucket --s3-prefix --stack-name --tags --template --template-file --use-container --watch"
        COMPREPLY=( $(compgen -W "${comp}" -f -- "${cur}") )
      fi

      # -----------------------
      # sam traces <third word>
      # -----------------------
      if [ "${prev}" = "traces" ]; then
        comp="--config-env --config-file --debug --end-time --help --output --profile --region --start-time --tail --trace-id"
        COMPREPLY=( $(compgen -W "${comp}" -f -- "${cur}") )
      fi

      # -----------------------
      # sam validate <third word>
      # -----------------------
      if [ "${prev}" = "validate" ]; then
        comp="--config-env --config-file --debug --help --profile --region --template --template-file"
        COMPREPLY=( $(compgen -W "${comp}" -f -- "${cur}") )
      fi
  fi

  if [ "${cword}" -eq 3 ]; then
      # ----------------------------
      # sam local <etc> <forth word>
      # ----------------------------
      # sam local generate-event <forth word>
      if [ "${prev}" = "generate-event" ]; then
        comp="alb alexa-skills-kit alexa-smart-home apigateway appsync batch cloudformation cloudfront cloudwatch codecommit codepipeline cognito config connect dynamodb kinesis lex lex-v2 rekognition s3 sagemaker ses sns sqs stepfunctions workmail --help"
        COMPREPLY=( $(compgen -W "${comp}" -f -- "${cur}") )
      fi
      # sam local invoke <forth word>
      if [ "${prev}" = "invoke" ]; then
        comp="--invoke-image --config-env --config-file --container-env-vars --container-host --container-host-interface --debug --debug-args --debug-port --debugger-path --docker-network --docker-volume-basedir --env-vars --event --force-image-build --help --layer-cache-basedir --log-file --parameter-overrides --profile --region --shutdown --skip-pull-image --template --template-file"
        COMPREPLY=( $(compgen -W "${comp}" -f -- "${cur}") )
      fi
      # sam local start-api <forth word>
      if [ "${prev}" = "start-api" ]; then
        comp="--config-env --config-file --container-env-vars --container-host --container-host-interface --debug --debug-args --debug-function --debug-port --debugger-path --docker-network --docker-volume-basedir --env-vars --force-image-build --help --host --invoke-image --layer-cache-basedir --log-file --parameter-overrides --port INTEGER --profile --region --shutdown --skip-pull-image --static-dir --template --template-file --warm-containers"
        COMPREPLY=( $(compgen -W "${comp}" -f -- "${cur}") )
      fi
      # sam local start-lambda <forth word>
      if [ "${prev}" = "start-lambda" ]; then
        comp="--config-env --config-file --container-env-vars --container-host --container-host-interface --debug --debug-args --debug-function --debug-port --debugger-path --docker-network --docker-volume-basedir --env-vars --force-image-build --help --host --invoke-image --layer-cache-basedir --log-file --parameter-overrides --port INTEGER --profile --region --shutdown --skip-pull-image --template --template-file --warm-containers"
        COMPREPLY=( $(compgen -W "${comp}" -f -- "${cur}") )
      fi

      # sam pipeline bootstrap <forth word>
      if [ "${prev}" = "bootstrap" ]; then
        comp="--bucket --cloudformation-execution-role --config-env --config-file --confirm-changeset --create-image-repository --debug --help --image-repository --interactive --no-confirm-changeset --no-create-image-repository --no-interactive --pipeline-execution-role --pipeline-user --profile --region --stage"
        COMPREPLY=( $(compgen -W "${comp}" -f -- "${cur}") )
      fi
      # sam pipeline init <forth word>
      if [ "${prev}" = "init" ]; then
        comp="--bootstrap --config-env --config-file --debug --help"
        COMPREPLY=( $(compgen -W "${comp}" -f -- "${cur}") )
      fi
  fi

  if [ "${prev}" = "--template" ]; then
    COMPREPLY=( $(compgen -f -- "${cur}") )
  elif [ "${prev}" = "--parameter-values" ]; then
    COMPREPLY=( $(compgen -f -- "${cur}") )
  elif [ "${prev}" = "--log-file" ]; then
    COMPREPLY=( $(compgen -f -- "${cur}") )
  elif [ "${prev}" = "--static-dir" ]; then
    COMPREPLY=( $(compgen -f -- "${cur}") )
  elif [ "${prev}" = "--port" ]; then
    COMPREPLY=( $(compgen -f -- "${cur}") )
  elif [ "${prev}" = "--host" ]; then
    COMPREPLY=( $(compgen -f -- "${cur}") )
  elif [ "${prev}" = "--env-vars" ]; then
    COMPREPLY=( $(compgen -f -- "${cur}") )
  elif [ "${prev}" = "--debug-port" ]; then
    COMPREPLY=( $(compgen -f -- "${cur}") )
  elif [ "${prev}" = "--docker-volume-basedir" ]; then
    COMPREPLY=( $(compgen -f -- "${cur}") )
  elif [ "${prev}" = "--docker-network" ]; then
    COMPREPLY=( $(compgen -f -- "${cur}") )
  elif [ "${prev}" = "--profile" ]; then
    COMPREPLY=( $(compgen -f -- "${cur}") )
  elif [ "${prev}" = "--template-file" ]; then
    COMPREPLY=( $(compgen -f -- "${cur}") )
  elif [ "${prev}" = "--stack-name" ]; then
    COMPREPLY=( $(compgen -f -- "${cur}") )
  elif [ "${prev}" = "--parameter-overrides" ]; then
    COMPREPLY=( $(compgen -f -- "${cur}") )
  elif [ "${prev}" = "--capabilities" ]; then
    COMPREPLY=( $(compgen -f -- "${cur}") )
  elif [ "${prev}" = "--no-execute-changeset" ]; then
    COMPREPLY=( $(compgen -f -- "${cur}") )
  elif [ "${prev}" = "--role-arn" ]; then
    COMPREPLY=( $(compgen -f -- "${cur}") )
  elif [ "${prev}" = "--notification-arns" ]; then
    COMPREPLY=( $(compgen -f -- "${cur}") )
  elif [ "${prev}" = "--role-arn" ]; then
    COMPREPLY=( $(compgen -f -- "${cur}") )
  fi

  if [ "${prev}" = "s3" ]; then
    comp="--region --bucket --key"
    COMPREPLY=( $(compgen -W "${comp}" -f -- "${cur}") )
  elif [ "${prev}" = "kinesis" ]; then
    comp="--region --partition --sequence --data"
    COMPREPLY=( $(compgen -W "${comp}" -f -- "${cur}") )
  elif [ "${prev}" = "dynamodb" ]; then
    comp="--region"
    COMPREPLY=( $(compgen -W "${comp}" -f -- "${cur}") )
  elif [ "${prev}" = "api" ]; then
    comp="--method --body --resource --path"
    COMPREPLY=( $(compgen -W "${comp}" -f -- "${cur}") )
  elif [ "${prev}" = "schedule" ]; then
    comp="--region"
    COMPREPLY=( $(compgen -W "${comp}" -f -- "${cur}") )
  elif [ "${prev}" = "sns" ]; then
    comp="--message --topic --subject"
    COMPREPLY=( $(compgen -W "${comp}" -f -- "${cur}") )
  fi




}

complete -F _sam sam
